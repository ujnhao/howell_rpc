// Code generated by thriftgo (0.3.6). DO NOT EDIT.

package howell_rpc

import (
	"context"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"howell/howell_rpc/kitex_gen/base"
	"howell/howell_rpc/kitex_gen/common"
	"howell/howell_rpc/kitex_gen/models"
	"strings"
)

type CreateCpsRebateDiscountsRequest struct {
	CRDEntity *models.CpsRebateDiscounts `thrift:"CRDEntity,1,required" frugal:"1,required,models.CpsRebateDiscounts" json:"CRDEntity"`
	Base      *base.Base                 `thrift:"Base,255" frugal:"255,default,base.Base" json:"Base"`
}

func NewCreateCpsRebateDiscountsRequest() *CreateCpsRebateDiscountsRequest {
	return &CreateCpsRebateDiscountsRequest{}
}

func (p *CreateCpsRebateDiscountsRequest) InitDefault() {
	*p = CreateCpsRebateDiscountsRequest{}
}

var CreateCpsRebateDiscountsRequest_CRDEntity_DEFAULT *models.CpsRebateDiscounts

func (p *CreateCpsRebateDiscountsRequest) GetCRDEntity() (v *models.CpsRebateDiscounts) {
	if !p.IsSetCRDEntity() {
		return CreateCpsRebateDiscountsRequest_CRDEntity_DEFAULT
	}
	return p.CRDEntity
}

var CreateCpsRebateDiscountsRequest_Base_DEFAULT *base.Base

func (p *CreateCpsRebateDiscountsRequest) GetBase() (v *base.Base) {
	if !p.IsSetBase() {
		return CreateCpsRebateDiscountsRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *CreateCpsRebateDiscountsRequest) SetCRDEntity(val *models.CpsRebateDiscounts) {
	p.CRDEntity = val
}
func (p *CreateCpsRebateDiscountsRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_CreateCpsRebateDiscountsRequest = map[int16]string{
	1:   "CRDEntity",
	255: "Base",
}

func (p *CreateCpsRebateDiscountsRequest) IsSetCRDEntity() bool {
	return p.CRDEntity != nil
}

func (p *CreateCpsRebateDiscountsRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *CreateCpsRebateDiscountsRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetCRDEntity bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetCRDEntity = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetCRDEntity {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CreateCpsRebateDiscountsRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_CreateCpsRebateDiscountsRequest[fieldId]))
}

func (p *CreateCpsRebateDiscountsRequest) ReadField1(iprot thrift.TProtocol) error {
	p.CRDEntity = models.NewCpsRebateDiscounts()
	if err := p.CRDEntity.Read(iprot); err != nil {
		return err
	}
	return nil
}
func (p *CreateCpsRebateDiscountsRequest) ReadField255(iprot thrift.TProtocol) error {
	p.Base = base.NewBase()
	if err := p.Base.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *CreateCpsRebateDiscountsRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateCpsRebateDiscountsRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CreateCpsRebateDiscountsRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("CRDEntity", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.CRDEntity.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CreateCpsRebateDiscountsRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Base.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *CreateCpsRebateDiscountsRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateCpsRebateDiscountsRequest(%+v)", *p)

}

func (p *CreateCpsRebateDiscountsRequest) DeepEqual(ano *CreateCpsRebateDiscountsRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.CRDEntity) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *CreateCpsRebateDiscountsRequest) Field1DeepEqual(src *models.CpsRebateDiscounts) bool {

	if !p.CRDEntity.DeepEqual(src) {
		return false
	}
	return true
}
func (p *CreateCpsRebateDiscountsRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type CreateCpsRebateDiscountsResponse struct {
	EntityId *string        `thrift:"EntityId,1,optional" frugal:"1,optional,string" json:"EntityId,omitempty"`
	BaseResp *base.BaseResp `thrift:"BaseResp,255" frugal:"255,default,base.BaseResp" json:"BaseResp"`
}

func NewCreateCpsRebateDiscountsResponse() *CreateCpsRebateDiscountsResponse {
	return &CreateCpsRebateDiscountsResponse{}
}

func (p *CreateCpsRebateDiscountsResponse) InitDefault() {
	*p = CreateCpsRebateDiscountsResponse{}
}

var CreateCpsRebateDiscountsResponse_EntityId_DEFAULT string

func (p *CreateCpsRebateDiscountsResponse) GetEntityId() (v string) {
	if !p.IsSetEntityId() {
		return CreateCpsRebateDiscountsResponse_EntityId_DEFAULT
	}
	return *p.EntityId
}

var CreateCpsRebateDiscountsResponse_BaseResp_DEFAULT *base.BaseResp

func (p *CreateCpsRebateDiscountsResponse) GetBaseResp() (v *base.BaseResp) {
	if !p.IsSetBaseResp() {
		return CreateCpsRebateDiscountsResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *CreateCpsRebateDiscountsResponse) SetEntityId(val *string) {
	p.EntityId = val
}
func (p *CreateCpsRebateDiscountsResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_CreateCpsRebateDiscountsResponse = map[int16]string{
	1:   "EntityId",
	255: "BaseResp",
}

func (p *CreateCpsRebateDiscountsResponse) IsSetEntityId() bool {
	return p.EntityId != nil
}

func (p *CreateCpsRebateDiscountsResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *CreateCpsRebateDiscountsResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CreateCpsRebateDiscountsResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CreateCpsRebateDiscountsResponse) ReadField1(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.EntityId = &v
	}
	return nil
}
func (p *CreateCpsRebateDiscountsResponse) ReadField255(iprot thrift.TProtocol) error {
	p.BaseResp = base.NewBaseResp()
	if err := p.BaseResp.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *CreateCpsRebateDiscountsResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateCpsRebateDiscountsResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CreateCpsRebateDiscountsResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEntityId() {
		if err = oprot.WriteFieldBegin("EntityId", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.EntityId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CreateCpsRebateDiscountsResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *CreateCpsRebateDiscountsResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateCpsRebateDiscountsResponse(%+v)", *p)

}

func (p *CreateCpsRebateDiscountsResponse) DeepEqual(ano *CreateCpsRebateDiscountsResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.EntityId) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *CreateCpsRebateDiscountsResponse) Field1DeepEqual(src *string) bool {

	if p.EntityId == src {
		return true
	} else if p.EntityId == nil || src == nil {
		return false
	}
	if strings.Compare(*p.EntityId, *src) != 0 {
		return false
	}
	return true
}
func (p *CreateCpsRebateDiscountsResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type UpdateCpsRebateDiscountsRequest struct {
	EntityId  string                     `thrift:"EntityId,1,required" frugal:"1,required,string" json:"EntityId"`
	CRDEntity *models.CpsRebateDiscounts `thrift:"CRDEntity,2,required" frugal:"2,required,models.CpsRebateDiscounts" json:"CRDEntity"`
	Base      *base.Base                 `thrift:"Base,255" frugal:"255,default,base.Base" json:"Base"`
}

func NewUpdateCpsRebateDiscountsRequest() *UpdateCpsRebateDiscountsRequest {
	return &UpdateCpsRebateDiscountsRequest{}
}

func (p *UpdateCpsRebateDiscountsRequest) InitDefault() {
	*p = UpdateCpsRebateDiscountsRequest{}
}

func (p *UpdateCpsRebateDiscountsRequest) GetEntityId() (v string) {
	return p.EntityId
}

var UpdateCpsRebateDiscountsRequest_CRDEntity_DEFAULT *models.CpsRebateDiscounts

func (p *UpdateCpsRebateDiscountsRequest) GetCRDEntity() (v *models.CpsRebateDiscounts) {
	if !p.IsSetCRDEntity() {
		return UpdateCpsRebateDiscountsRequest_CRDEntity_DEFAULT
	}
	return p.CRDEntity
}

var UpdateCpsRebateDiscountsRequest_Base_DEFAULT *base.Base

func (p *UpdateCpsRebateDiscountsRequest) GetBase() (v *base.Base) {
	if !p.IsSetBase() {
		return UpdateCpsRebateDiscountsRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *UpdateCpsRebateDiscountsRequest) SetEntityId(val string) {
	p.EntityId = val
}
func (p *UpdateCpsRebateDiscountsRequest) SetCRDEntity(val *models.CpsRebateDiscounts) {
	p.CRDEntity = val
}
func (p *UpdateCpsRebateDiscountsRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_UpdateCpsRebateDiscountsRequest = map[int16]string{
	1:   "EntityId",
	2:   "CRDEntity",
	255: "Base",
}

func (p *UpdateCpsRebateDiscountsRequest) IsSetCRDEntity() bool {
	return p.CRDEntity != nil
}

func (p *UpdateCpsRebateDiscountsRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *UpdateCpsRebateDiscountsRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetEntityId bool = false
	var issetCRDEntity bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetEntityId = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetCRDEntity = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetEntityId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetCRDEntity {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_UpdateCpsRebateDiscountsRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_UpdateCpsRebateDiscountsRequest[fieldId]))
}

func (p *UpdateCpsRebateDiscountsRequest) ReadField1(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.EntityId = v
	}
	return nil
}
func (p *UpdateCpsRebateDiscountsRequest) ReadField2(iprot thrift.TProtocol) error {
	p.CRDEntity = models.NewCpsRebateDiscounts()
	if err := p.CRDEntity.Read(iprot); err != nil {
		return err
	}
	return nil
}
func (p *UpdateCpsRebateDiscountsRequest) ReadField255(iprot thrift.TProtocol) error {
	p.Base = base.NewBase()
	if err := p.Base.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *UpdateCpsRebateDiscountsRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateCpsRebateDiscountsRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *UpdateCpsRebateDiscountsRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("EntityId", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.EntityId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *UpdateCpsRebateDiscountsRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("CRDEntity", thrift.STRUCT, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.CRDEntity.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *UpdateCpsRebateDiscountsRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Base.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *UpdateCpsRebateDiscountsRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateCpsRebateDiscountsRequest(%+v)", *p)

}

func (p *UpdateCpsRebateDiscountsRequest) DeepEqual(ano *UpdateCpsRebateDiscountsRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.EntityId) {
		return false
	}
	if !p.Field2DeepEqual(ano.CRDEntity) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *UpdateCpsRebateDiscountsRequest) Field1DeepEqual(src string) bool {

	if strings.Compare(p.EntityId, src) != 0 {
		return false
	}
	return true
}
func (p *UpdateCpsRebateDiscountsRequest) Field2DeepEqual(src *models.CpsRebateDiscounts) bool {

	if !p.CRDEntity.DeepEqual(src) {
		return false
	}
	return true
}
func (p *UpdateCpsRebateDiscountsRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type UpdateCpsRebateDiscountsResponse struct {
	BaseResp *base.BaseResp `thrift:"BaseResp,255" frugal:"255,default,base.BaseResp" json:"BaseResp"`
}

func NewUpdateCpsRebateDiscountsResponse() *UpdateCpsRebateDiscountsResponse {
	return &UpdateCpsRebateDiscountsResponse{}
}

func (p *UpdateCpsRebateDiscountsResponse) InitDefault() {
	*p = UpdateCpsRebateDiscountsResponse{}
}

var UpdateCpsRebateDiscountsResponse_BaseResp_DEFAULT *base.BaseResp

func (p *UpdateCpsRebateDiscountsResponse) GetBaseResp() (v *base.BaseResp) {
	if !p.IsSetBaseResp() {
		return UpdateCpsRebateDiscountsResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *UpdateCpsRebateDiscountsResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_UpdateCpsRebateDiscountsResponse = map[int16]string{
	255: "BaseResp",
}

func (p *UpdateCpsRebateDiscountsResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *UpdateCpsRebateDiscountsResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_UpdateCpsRebateDiscountsResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *UpdateCpsRebateDiscountsResponse) ReadField255(iprot thrift.TProtocol) error {
	p.BaseResp = base.NewBaseResp()
	if err := p.BaseResp.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *UpdateCpsRebateDiscountsResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateCpsRebateDiscountsResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *UpdateCpsRebateDiscountsResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *UpdateCpsRebateDiscountsResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateCpsRebateDiscountsResponse(%+v)", *p)

}

func (p *UpdateCpsRebateDiscountsResponse) DeepEqual(ano *UpdateCpsRebateDiscountsResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *UpdateCpsRebateDiscountsResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type MGetCpsRebateDiscountsRequest struct {
	EntityIdList []string   `thrift:"EntityIdList,1,required" frugal:"1,required,list<string>" json:"EntityIdList"`
	Base         *base.Base `thrift:"Base,255" frugal:"255,default,base.Base" json:"Base"`
}

func NewMGetCpsRebateDiscountsRequest() *MGetCpsRebateDiscountsRequest {
	return &MGetCpsRebateDiscountsRequest{}
}

func (p *MGetCpsRebateDiscountsRequest) InitDefault() {
	*p = MGetCpsRebateDiscountsRequest{}
}

func (p *MGetCpsRebateDiscountsRequest) GetEntityIdList() (v []string) {
	return p.EntityIdList
}

var MGetCpsRebateDiscountsRequest_Base_DEFAULT *base.Base

func (p *MGetCpsRebateDiscountsRequest) GetBase() (v *base.Base) {
	if !p.IsSetBase() {
		return MGetCpsRebateDiscountsRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *MGetCpsRebateDiscountsRequest) SetEntityIdList(val []string) {
	p.EntityIdList = val
}
func (p *MGetCpsRebateDiscountsRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_MGetCpsRebateDiscountsRequest = map[int16]string{
	1:   "EntityIdList",
	255: "Base",
}

func (p *MGetCpsRebateDiscountsRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *MGetCpsRebateDiscountsRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetEntityIdList bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetEntityIdList = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetEntityIdList {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MGetCpsRebateDiscountsRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_MGetCpsRebateDiscountsRequest[fieldId]))
}

func (p *MGetCpsRebateDiscountsRequest) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.EntityIdList = make([]string, 0, size)
	for i := 0; i < size; i++ {

		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		p.EntityIdList = append(p.EntityIdList, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}
func (p *MGetCpsRebateDiscountsRequest) ReadField255(iprot thrift.TProtocol) error {
	p.Base = base.NewBase()
	if err := p.Base.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *MGetCpsRebateDiscountsRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("MGetCpsRebateDiscountsRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MGetCpsRebateDiscountsRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("EntityIdList", thrift.LIST, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.EntityIdList)); err != nil {
		return err
	}
	for _, v := range p.EntityIdList {
		if err := oprot.WriteString(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *MGetCpsRebateDiscountsRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Base.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *MGetCpsRebateDiscountsRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MGetCpsRebateDiscountsRequest(%+v)", *p)

}

func (p *MGetCpsRebateDiscountsRequest) DeepEqual(ano *MGetCpsRebateDiscountsRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.EntityIdList) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *MGetCpsRebateDiscountsRequest) Field1DeepEqual(src []string) bool {

	if len(p.EntityIdList) != len(src) {
		return false
	}
	for i, v := range p.EntityIdList {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *MGetCpsRebateDiscountsRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type MGetCpsRebateDiscountsResponse struct {
	EntityMap map[string]*models.CpsRebateDiscounts `thrift:"EntityMap,1,optional" frugal:"1,optional,map<string:models.CpsRebateDiscounts>" json:"EntityMap,omitempty"`
	BaseResp  *base.BaseResp                        `thrift:"BaseResp,255" frugal:"255,default,base.BaseResp" json:"BaseResp"`
}

func NewMGetCpsRebateDiscountsResponse() *MGetCpsRebateDiscountsResponse {
	return &MGetCpsRebateDiscountsResponse{}
}

func (p *MGetCpsRebateDiscountsResponse) InitDefault() {
	*p = MGetCpsRebateDiscountsResponse{}
}

var MGetCpsRebateDiscountsResponse_EntityMap_DEFAULT map[string]*models.CpsRebateDiscounts

func (p *MGetCpsRebateDiscountsResponse) GetEntityMap() (v map[string]*models.CpsRebateDiscounts) {
	if !p.IsSetEntityMap() {
		return MGetCpsRebateDiscountsResponse_EntityMap_DEFAULT
	}
	return p.EntityMap
}

var MGetCpsRebateDiscountsResponse_BaseResp_DEFAULT *base.BaseResp

func (p *MGetCpsRebateDiscountsResponse) GetBaseResp() (v *base.BaseResp) {
	if !p.IsSetBaseResp() {
		return MGetCpsRebateDiscountsResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *MGetCpsRebateDiscountsResponse) SetEntityMap(val map[string]*models.CpsRebateDiscounts) {
	p.EntityMap = val
}
func (p *MGetCpsRebateDiscountsResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_MGetCpsRebateDiscountsResponse = map[int16]string{
	1:   "EntityMap",
	255: "BaseResp",
}

func (p *MGetCpsRebateDiscountsResponse) IsSetEntityMap() bool {
	return p.EntityMap != nil
}

func (p *MGetCpsRebateDiscountsResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *MGetCpsRebateDiscountsResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MGetCpsRebateDiscountsResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MGetCpsRebateDiscountsResponse) ReadField1(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	p.EntityMap = make(map[string]*models.CpsRebateDiscounts, size)
	for i := 0; i < size; i++ {
		var _key string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_key = v
		}
		_val := models.NewCpsRebateDiscounts()
		if err := _val.Read(iprot); err != nil {
			return err
		}

		p.EntityMap[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	return nil
}
func (p *MGetCpsRebateDiscountsResponse) ReadField255(iprot thrift.TProtocol) error {
	p.BaseResp = base.NewBaseResp()
	if err := p.BaseResp.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *MGetCpsRebateDiscountsResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("MGetCpsRebateDiscountsResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MGetCpsRebateDiscountsResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEntityMap() {
		if err = oprot.WriteFieldBegin("EntityMap", thrift.MAP, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(p.EntityMap)); err != nil {
			return err
		}
		for k, v := range p.EntityMap {
			if err := oprot.WriteString(k); err != nil {
				return err
			}
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *MGetCpsRebateDiscountsResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *MGetCpsRebateDiscountsResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MGetCpsRebateDiscountsResponse(%+v)", *p)

}

func (p *MGetCpsRebateDiscountsResponse) DeepEqual(ano *MGetCpsRebateDiscountsResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.EntityMap) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *MGetCpsRebateDiscountsResponse) Field1DeepEqual(src map[string]*models.CpsRebateDiscounts) bool {

	if len(p.EntityMap) != len(src) {
		return false
	}
	for k, v := range p.EntityMap {
		_src := src[k]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *MGetCpsRebateDiscountsResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type QueryCpsRebateDiscountsRequest struct {
	EntityIdList []string         `thrift:"EntityIdList,1,optional" frugal:"1,optional,list<string>" json:"EntityIdList,omitempty"`
	ResourceList []string         `thrift:"ResourceList,2,optional" frugal:"2,optional,list<string>" json:"ResourceList,omitempty"`
	ActTypeList  []common.ActType `thrift:"ActTypeList,3,optional" frugal:"3,optional,list<string>" json:"ActTypeList,omitempty"`
	CpsTypeList  []common.CpsType `thrift:"CpsTypeList,4,optional" frugal:"4,optional,list<string>" json:"CpsTypeList,omitempty"`
	PageIndex    int32            `thrift:"PageIndex,99,required" frugal:"99,required,i32" json:"PageIndex"`
	PageSize     int32            `thrift:"PageSize,100,required" frugal:"100,required,i32" json:"PageSize"`
	Base         *base.Base       `thrift:"Base,255" frugal:"255,default,base.Base" json:"Base"`
}

func NewQueryCpsRebateDiscountsRequest() *QueryCpsRebateDiscountsRequest {
	return &QueryCpsRebateDiscountsRequest{}
}

func (p *QueryCpsRebateDiscountsRequest) InitDefault() {
	*p = QueryCpsRebateDiscountsRequest{}
}

var QueryCpsRebateDiscountsRequest_EntityIdList_DEFAULT []string

func (p *QueryCpsRebateDiscountsRequest) GetEntityIdList() (v []string) {
	if !p.IsSetEntityIdList() {
		return QueryCpsRebateDiscountsRequest_EntityIdList_DEFAULT
	}
	return p.EntityIdList
}

var QueryCpsRebateDiscountsRequest_ResourceList_DEFAULT []string

func (p *QueryCpsRebateDiscountsRequest) GetResourceList() (v []string) {
	if !p.IsSetResourceList() {
		return QueryCpsRebateDiscountsRequest_ResourceList_DEFAULT
	}
	return p.ResourceList
}

var QueryCpsRebateDiscountsRequest_ActTypeList_DEFAULT []common.ActType

func (p *QueryCpsRebateDiscountsRequest) GetActTypeList() (v []common.ActType) {
	if !p.IsSetActTypeList() {
		return QueryCpsRebateDiscountsRequest_ActTypeList_DEFAULT
	}
	return p.ActTypeList
}

var QueryCpsRebateDiscountsRequest_CpsTypeList_DEFAULT []common.CpsType

func (p *QueryCpsRebateDiscountsRequest) GetCpsTypeList() (v []common.CpsType) {
	if !p.IsSetCpsTypeList() {
		return QueryCpsRebateDiscountsRequest_CpsTypeList_DEFAULT
	}
	return p.CpsTypeList
}

func (p *QueryCpsRebateDiscountsRequest) GetPageIndex() (v int32) {
	return p.PageIndex
}

func (p *QueryCpsRebateDiscountsRequest) GetPageSize() (v int32) {
	return p.PageSize
}

var QueryCpsRebateDiscountsRequest_Base_DEFAULT *base.Base

func (p *QueryCpsRebateDiscountsRequest) GetBase() (v *base.Base) {
	if !p.IsSetBase() {
		return QueryCpsRebateDiscountsRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *QueryCpsRebateDiscountsRequest) SetEntityIdList(val []string) {
	p.EntityIdList = val
}
func (p *QueryCpsRebateDiscountsRequest) SetResourceList(val []string) {
	p.ResourceList = val
}
func (p *QueryCpsRebateDiscountsRequest) SetActTypeList(val []common.ActType) {
	p.ActTypeList = val
}
func (p *QueryCpsRebateDiscountsRequest) SetCpsTypeList(val []common.CpsType) {
	p.CpsTypeList = val
}
func (p *QueryCpsRebateDiscountsRequest) SetPageIndex(val int32) {
	p.PageIndex = val
}
func (p *QueryCpsRebateDiscountsRequest) SetPageSize(val int32) {
	p.PageSize = val
}
func (p *QueryCpsRebateDiscountsRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_QueryCpsRebateDiscountsRequest = map[int16]string{
	1:   "EntityIdList",
	2:   "ResourceList",
	3:   "ActTypeList",
	4:   "CpsTypeList",
	99:  "PageIndex",
	100: "PageSize",
	255: "Base",
}

func (p *QueryCpsRebateDiscountsRequest) IsSetEntityIdList() bool {
	return p.EntityIdList != nil
}

func (p *QueryCpsRebateDiscountsRequest) IsSetResourceList() bool {
	return p.ResourceList != nil
}

func (p *QueryCpsRebateDiscountsRequest) IsSetActTypeList() bool {
	return p.ActTypeList != nil
}

func (p *QueryCpsRebateDiscountsRequest) IsSetCpsTypeList() bool {
	return p.CpsTypeList != nil
}

func (p *QueryCpsRebateDiscountsRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *QueryCpsRebateDiscountsRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetPageIndex bool = false
	var issetPageSize bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 99:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField99(iprot); err != nil {
					goto ReadFieldError
				}
				issetPageIndex = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 100:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField100(iprot); err != nil {
					goto ReadFieldError
				}
				issetPageSize = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetPageIndex {
		fieldId = 99
		goto RequiredFieldNotSetError
	}

	if !issetPageSize {
		fieldId = 100
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_QueryCpsRebateDiscountsRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_QueryCpsRebateDiscountsRequest[fieldId]))
}

func (p *QueryCpsRebateDiscountsRequest) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.EntityIdList = make([]string, 0, size)
	for i := 0; i < size; i++ {

		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		p.EntityIdList = append(p.EntityIdList, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}
func (p *QueryCpsRebateDiscountsRequest) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.ResourceList = make([]string, 0, size)
	for i := 0; i < size; i++ {

		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		p.ResourceList = append(p.ResourceList, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}
func (p *QueryCpsRebateDiscountsRequest) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.ActTypeList = make([]common.ActType, 0, size)
	for i := 0; i < size; i++ {

		var _elem common.ActType
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		p.ActTypeList = append(p.ActTypeList, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}
func (p *QueryCpsRebateDiscountsRequest) ReadField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.CpsTypeList = make([]common.CpsType, 0, size)
	for i := 0; i < size; i++ {

		var _elem common.CpsType
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		p.CpsTypeList = append(p.CpsTypeList, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}
func (p *QueryCpsRebateDiscountsRequest) ReadField99(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.PageIndex = v
	}
	return nil
}
func (p *QueryCpsRebateDiscountsRequest) ReadField100(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.PageSize = v
	}
	return nil
}
func (p *QueryCpsRebateDiscountsRequest) ReadField255(iprot thrift.TProtocol) error {
	p.Base = base.NewBase()
	if err := p.Base.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *QueryCpsRebateDiscountsRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("QueryCpsRebateDiscountsRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField99(oprot); err != nil {
			fieldId = 99
			goto WriteFieldError
		}
		if err = p.writeField100(oprot); err != nil {
			fieldId = 100
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *QueryCpsRebateDiscountsRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEntityIdList() {
		if err = oprot.WriteFieldBegin("EntityIdList", thrift.LIST, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.EntityIdList)); err != nil {
			return err
		}
		for _, v := range p.EntityIdList {
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *QueryCpsRebateDiscountsRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetResourceList() {
		if err = oprot.WriteFieldBegin("ResourceList", thrift.LIST, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.ResourceList)); err != nil {
			return err
		}
		for _, v := range p.ResourceList {
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *QueryCpsRebateDiscountsRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetActTypeList() {
		if err = oprot.WriteFieldBegin("ActTypeList", thrift.LIST, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.ActTypeList)); err != nil {
			return err
		}
		for _, v := range p.ActTypeList {
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *QueryCpsRebateDiscountsRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetCpsTypeList() {
		if err = oprot.WriteFieldBegin("CpsTypeList", thrift.LIST, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.CpsTypeList)); err != nil {
			return err
		}
		for _, v := range p.CpsTypeList {
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *QueryCpsRebateDiscountsRequest) writeField99(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("PageIndex", thrift.I32, 99); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.PageIndex); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 99 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 99 end error: ", p), err)
}

func (p *QueryCpsRebateDiscountsRequest) writeField100(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("PageSize", thrift.I32, 100); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.PageSize); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 100 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 100 end error: ", p), err)
}

func (p *QueryCpsRebateDiscountsRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Base.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *QueryCpsRebateDiscountsRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QueryCpsRebateDiscountsRequest(%+v)", *p)

}

func (p *QueryCpsRebateDiscountsRequest) DeepEqual(ano *QueryCpsRebateDiscountsRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.EntityIdList) {
		return false
	}
	if !p.Field2DeepEqual(ano.ResourceList) {
		return false
	}
	if !p.Field3DeepEqual(ano.ActTypeList) {
		return false
	}
	if !p.Field4DeepEqual(ano.CpsTypeList) {
		return false
	}
	if !p.Field99DeepEqual(ano.PageIndex) {
		return false
	}
	if !p.Field100DeepEqual(ano.PageSize) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *QueryCpsRebateDiscountsRequest) Field1DeepEqual(src []string) bool {

	if len(p.EntityIdList) != len(src) {
		return false
	}
	for i, v := range p.EntityIdList {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *QueryCpsRebateDiscountsRequest) Field2DeepEqual(src []string) bool {

	if len(p.ResourceList) != len(src) {
		return false
	}
	for i, v := range p.ResourceList {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *QueryCpsRebateDiscountsRequest) Field3DeepEqual(src []common.ActType) bool {

	if len(p.ActTypeList) != len(src) {
		return false
	}
	for i, v := range p.ActTypeList {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *QueryCpsRebateDiscountsRequest) Field4DeepEqual(src []common.CpsType) bool {

	if len(p.CpsTypeList) != len(src) {
		return false
	}
	for i, v := range p.CpsTypeList {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *QueryCpsRebateDiscountsRequest) Field99DeepEqual(src int32) bool {

	if p.PageIndex != src {
		return false
	}
	return true
}
func (p *QueryCpsRebateDiscountsRequest) Field100DeepEqual(src int32) bool {

	if p.PageSize != src {
		return false
	}
	return true
}
func (p *QueryCpsRebateDiscountsRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type QueryCpsRebateDiscountsResponse struct {
	ItemList   []*models.CpsRebateDiscounts `thrift:"ItemList,1,optional" frugal:"1,optional,list<models.CpsRebateDiscounts>" json:"ItemList,omitempty"`
	Pagination *common.Pagination           `thrift:"Pagination,100,required" frugal:"100,required,common.Pagination" json:"Pagination"`
	BaseResp   *base.BaseResp               `thrift:"BaseResp,255" frugal:"255,default,base.BaseResp" json:"BaseResp"`
}

func NewQueryCpsRebateDiscountsResponse() *QueryCpsRebateDiscountsResponse {
	return &QueryCpsRebateDiscountsResponse{}
}

func (p *QueryCpsRebateDiscountsResponse) InitDefault() {
	*p = QueryCpsRebateDiscountsResponse{}
}

var QueryCpsRebateDiscountsResponse_ItemList_DEFAULT []*models.CpsRebateDiscounts

func (p *QueryCpsRebateDiscountsResponse) GetItemList() (v []*models.CpsRebateDiscounts) {
	if !p.IsSetItemList() {
		return QueryCpsRebateDiscountsResponse_ItemList_DEFAULT
	}
	return p.ItemList
}

var QueryCpsRebateDiscountsResponse_Pagination_DEFAULT *common.Pagination

func (p *QueryCpsRebateDiscountsResponse) GetPagination() (v *common.Pagination) {
	if !p.IsSetPagination() {
		return QueryCpsRebateDiscountsResponse_Pagination_DEFAULT
	}
	return p.Pagination
}

var QueryCpsRebateDiscountsResponse_BaseResp_DEFAULT *base.BaseResp

func (p *QueryCpsRebateDiscountsResponse) GetBaseResp() (v *base.BaseResp) {
	if !p.IsSetBaseResp() {
		return QueryCpsRebateDiscountsResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *QueryCpsRebateDiscountsResponse) SetItemList(val []*models.CpsRebateDiscounts) {
	p.ItemList = val
}
func (p *QueryCpsRebateDiscountsResponse) SetPagination(val *common.Pagination) {
	p.Pagination = val
}
func (p *QueryCpsRebateDiscountsResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_QueryCpsRebateDiscountsResponse = map[int16]string{
	1:   "ItemList",
	100: "Pagination",
	255: "BaseResp",
}

func (p *QueryCpsRebateDiscountsResponse) IsSetItemList() bool {
	return p.ItemList != nil
}

func (p *QueryCpsRebateDiscountsResponse) IsSetPagination() bool {
	return p.Pagination != nil
}

func (p *QueryCpsRebateDiscountsResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *QueryCpsRebateDiscountsResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetPagination bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 100:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField100(iprot); err != nil {
					goto ReadFieldError
				}
				issetPagination = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetPagination {
		fieldId = 100
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_QueryCpsRebateDiscountsResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_QueryCpsRebateDiscountsResponse[fieldId]))
}

func (p *QueryCpsRebateDiscountsResponse) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.ItemList = make([]*models.CpsRebateDiscounts, 0, size)
	for i := 0; i < size; i++ {
		_elem := models.NewCpsRebateDiscounts()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.ItemList = append(p.ItemList, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}
func (p *QueryCpsRebateDiscountsResponse) ReadField100(iprot thrift.TProtocol) error {
	p.Pagination = common.NewPagination()
	if err := p.Pagination.Read(iprot); err != nil {
		return err
	}
	return nil
}
func (p *QueryCpsRebateDiscountsResponse) ReadField255(iprot thrift.TProtocol) error {
	p.BaseResp = base.NewBaseResp()
	if err := p.BaseResp.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *QueryCpsRebateDiscountsResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("QueryCpsRebateDiscountsResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField100(oprot); err != nil {
			fieldId = 100
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *QueryCpsRebateDiscountsResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetItemList() {
		if err = oprot.WriteFieldBegin("ItemList", thrift.LIST, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ItemList)); err != nil {
			return err
		}
		for _, v := range p.ItemList {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *QueryCpsRebateDiscountsResponse) writeField100(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Pagination", thrift.STRUCT, 100); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Pagination.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 100 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 100 end error: ", p), err)
}

func (p *QueryCpsRebateDiscountsResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *QueryCpsRebateDiscountsResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QueryCpsRebateDiscountsResponse(%+v)", *p)

}

func (p *QueryCpsRebateDiscountsResponse) DeepEqual(ano *QueryCpsRebateDiscountsResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ItemList) {
		return false
	}
	if !p.Field100DeepEqual(ano.Pagination) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *QueryCpsRebateDiscountsResponse) Field1DeepEqual(src []*models.CpsRebateDiscounts) bool {

	if len(p.ItemList) != len(src) {
		return false
	}
	for i, v := range p.ItemList {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *QueryCpsRebateDiscountsResponse) Field100DeepEqual(src *common.Pagination) bool {

	if !p.Pagination.DeepEqual(src) {
		return false
	}
	return true
}
func (p *QueryCpsRebateDiscountsResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type HowellRpcService interface {
	CreateCpsRebateDiscounts(ctx context.Context, req *CreateCpsRebateDiscountsRequest) (r *CreateCpsRebateDiscountsResponse, err error)

	UpdateCpsRebateDiscounts(ctx context.Context, req *UpdateCpsRebateDiscountsRequest) (r *UpdateCpsRebateDiscountsResponse, err error)

	MGetCpsRebateDiscounts(ctx context.Context, req *MGetCpsRebateDiscountsRequest) (r *MGetCpsRebateDiscountsResponse, err error)

	QueryCpsRebateDiscounts(ctx context.Context, req *QueryCpsRebateDiscountsRequest) (r *QueryCpsRebateDiscountsResponse, err error)
}

type HowellRpcServiceClient struct {
	c thrift.TClient
}

func NewHowellRpcServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *HowellRpcServiceClient {
	return &HowellRpcServiceClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewHowellRpcServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *HowellRpcServiceClient {
	return &HowellRpcServiceClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewHowellRpcServiceClient(c thrift.TClient) *HowellRpcServiceClient {
	return &HowellRpcServiceClient{
		c: c,
	}
}

func (p *HowellRpcServiceClient) Client_() thrift.TClient {
	return p.c
}

func (p *HowellRpcServiceClient) CreateCpsRebateDiscounts(ctx context.Context, req *CreateCpsRebateDiscountsRequest) (r *CreateCpsRebateDiscountsResponse, err error) {
	var _args HowellRpcServiceCreateCpsRebateDiscountsArgs
	_args.Req = req
	var _result HowellRpcServiceCreateCpsRebateDiscountsResult
	if err = p.Client_().Call(ctx, "CreateCpsRebateDiscounts", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *HowellRpcServiceClient) UpdateCpsRebateDiscounts(ctx context.Context, req *UpdateCpsRebateDiscountsRequest) (r *UpdateCpsRebateDiscountsResponse, err error) {
	var _args HowellRpcServiceUpdateCpsRebateDiscountsArgs
	_args.Req = req
	var _result HowellRpcServiceUpdateCpsRebateDiscountsResult
	if err = p.Client_().Call(ctx, "UpdateCpsRebateDiscounts", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *HowellRpcServiceClient) MGetCpsRebateDiscounts(ctx context.Context, req *MGetCpsRebateDiscountsRequest) (r *MGetCpsRebateDiscountsResponse, err error) {
	var _args HowellRpcServiceMGetCpsRebateDiscountsArgs
	_args.Req = req
	var _result HowellRpcServiceMGetCpsRebateDiscountsResult
	if err = p.Client_().Call(ctx, "MGetCpsRebateDiscounts", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *HowellRpcServiceClient) QueryCpsRebateDiscounts(ctx context.Context, req *QueryCpsRebateDiscountsRequest) (r *QueryCpsRebateDiscountsResponse, err error) {
	var _args HowellRpcServiceQueryCpsRebateDiscountsArgs
	_args.Req = req
	var _result HowellRpcServiceQueryCpsRebateDiscountsResult
	if err = p.Client_().Call(ctx, "QueryCpsRebateDiscounts", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

type HowellRpcServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      HowellRpcService
}

func (p *HowellRpcServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *HowellRpcServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *HowellRpcServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewHowellRpcServiceProcessor(handler HowellRpcService) *HowellRpcServiceProcessor {
	self := &HowellRpcServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self.AddToProcessorMap("CreateCpsRebateDiscounts", &howellRpcServiceProcessorCreateCpsRebateDiscounts{handler: handler})
	self.AddToProcessorMap("UpdateCpsRebateDiscounts", &howellRpcServiceProcessorUpdateCpsRebateDiscounts{handler: handler})
	self.AddToProcessorMap("MGetCpsRebateDiscounts", &howellRpcServiceProcessorMGetCpsRebateDiscounts{handler: handler})
	self.AddToProcessorMap("QueryCpsRebateDiscounts", &howellRpcServiceProcessorQueryCpsRebateDiscounts{handler: handler})
	return self
}
func (p *HowellRpcServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x
}

type howellRpcServiceProcessorCreateCpsRebateDiscounts struct {
	handler HowellRpcService
}

func (p *howellRpcServiceProcessorCreateCpsRebateDiscounts) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := HowellRpcServiceCreateCpsRebateDiscountsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("CreateCpsRebateDiscounts", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := HowellRpcServiceCreateCpsRebateDiscountsResult{}
	var retval *CreateCpsRebateDiscountsResponse
	if retval, err2 = p.handler.CreateCpsRebateDiscounts(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing CreateCpsRebateDiscounts: "+err2.Error())
		oprot.WriteMessageBegin("CreateCpsRebateDiscounts", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("CreateCpsRebateDiscounts", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type howellRpcServiceProcessorUpdateCpsRebateDiscounts struct {
	handler HowellRpcService
}

func (p *howellRpcServiceProcessorUpdateCpsRebateDiscounts) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := HowellRpcServiceUpdateCpsRebateDiscountsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("UpdateCpsRebateDiscounts", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := HowellRpcServiceUpdateCpsRebateDiscountsResult{}
	var retval *UpdateCpsRebateDiscountsResponse
	if retval, err2 = p.handler.UpdateCpsRebateDiscounts(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UpdateCpsRebateDiscounts: "+err2.Error())
		oprot.WriteMessageBegin("UpdateCpsRebateDiscounts", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("UpdateCpsRebateDiscounts", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type howellRpcServiceProcessorMGetCpsRebateDiscounts struct {
	handler HowellRpcService
}

func (p *howellRpcServiceProcessorMGetCpsRebateDiscounts) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := HowellRpcServiceMGetCpsRebateDiscountsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("MGetCpsRebateDiscounts", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := HowellRpcServiceMGetCpsRebateDiscountsResult{}
	var retval *MGetCpsRebateDiscountsResponse
	if retval, err2 = p.handler.MGetCpsRebateDiscounts(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing MGetCpsRebateDiscounts: "+err2.Error())
		oprot.WriteMessageBegin("MGetCpsRebateDiscounts", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("MGetCpsRebateDiscounts", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type howellRpcServiceProcessorQueryCpsRebateDiscounts struct {
	handler HowellRpcService
}

func (p *howellRpcServiceProcessorQueryCpsRebateDiscounts) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := HowellRpcServiceQueryCpsRebateDiscountsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("QueryCpsRebateDiscounts", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := HowellRpcServiceQueryCpsRebateDiscountsResult{}
	var retval *QueryCpsRebateDiscountsResponse
	if retval, err2 = p.handler.QueryCpsRebateDiscounts(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing QueryCpsRebateDiscounts: "+err2.Error())
		oprot.WriteMessageBegin("QueryCpsRebateDiscounts", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("QueryCpsRebateDiscounts", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type HowellRpcServiceCreateCpsRebateDiscountsArgs struct {
	Req *CreateCpsRebateDiscountsRequest `thrift:"req,1" frugal:"1,default,CreateCpsRebateDiscountsRequest" json:"req"`
}

func NewHowellRpcServiceCreateCpsRebateDiscountsArgs() *HowellRpcServiceCreateCpsRebateDiscountsArgs {
	return &HowellRpcServiceCreateCpsRebateDiscountsArgs{}
}

func (p *HowellRpcServiceCreateCpsRebateDiscountsArgs) InitDefault() {
	*p = HowellRpcServiceCreateCpsRebateDiscountsArgs{}
}

var HowellRpcServiceCreateCpsRebateDiscountsArgs_Req_DEFAULT *CreateCpsRebateDiscountsRequest

func (p *HowellRpcServiceCreateCpsRebateDiscountsArgs) GetReq() (v *CreateCpsRebateDiscountsRequest) {
	if !p.IsSetReq() {
		return HowellRpcServiceCreateCpsRebateDiscountsArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *HowellRpcServiceCreateCpsRebateDiscountsArgs) SetReq(val *CreateCpsRebateDiscountsRequest) {
	p.Req = val
}

var fieldIDToName_HowellRpcServiceCreateCpsRebateDiscountsArgs = map[int16]string{
	1: "req",
}

func (p *HowellRpcServiceCreateCpsRebateDiscountsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *HowellRpcServiceCreateCpsRebateDiscountsArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_HowellRpcServiceCreateCpsRebateDiscountsArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *HowellRpcServiceCreateCpsRebateDiscountsArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewCreateCpsRebateDiscountsRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *HowellRpcServiceCreateCpsRebateDiscountsArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateCpsRebateDiscounts_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *HowellRpcServiceCreateCpsRebateDiscountsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *HowellRpcServiceCreateCpsRebateDiscountsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HowellRpcServiceCreateCpsRebateDiscountsArgs(%+v)", *p)

}

func (p *HowellRpcServiceCreateCpsRebateDiscountsArgs) DeepEqual(ano *HowellRpcServiceCreateCpsRebateDiscountsArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *HowellRpcServiceCreateCpsRebateDiscountsArgs) Field1DeepEqual(src *CreateCpsRebateDiscountsRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type HowellRpcServiceCreateCpsRebateDiscountsResult struct {
	Success *CreateCpsRebateDiscountsResponse `thrift:"success,0,optional" frugal:"0,optional,CreateCpsRebateDiscountsResponse" json:"success,omitempty"`
}

func NewHowellRpcServiceCreateCpsRebateDiscountsResult() *HowellRpcServiceCreateCpsRebateDiscountsResult {
	return &HowellRpcServiceCreateCpsRebateDiscountsResult{}
}

func (p *HowellRpcServiceCreateCpsRebateDiscountsResult) InitDefault() {
	*p = HowellRpcServiceCreateCpsRebateDiscountsResult{}
}

var HowellRpcServiceCreateCpsRebateDiscountsResult_Success_DEFAULT *CreateCpsRebateDiscountsResponse

func (p *HowellRpcServiceCreateCpsRebateDiscountsResult) GetSuccess() (v *CreateCpsRebateDiscountsResponse) {
	if !p.IsSetSuccess() {
		return HowellRpcServiceCreateCpsRebateDiscountsResult_Success_DEFAULT
	}
	return p.Success
}
func (p *HowellRpcServiceCreateCpsRebateDiscountsResult) SetSuccess(x interface{}) {
	p.Success = x.(*CreateCpsRebateDiscountsResponse)
}

var fieldIDToName_HowellRpcServiceCreateCpsRebateDiscountsResult = map[int16]string{
	0: "success",
}

func (p *HowellRpcServiceCreateCpsRebateDiscountsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *HowellRpcServiceCreateCpsRebateDiscountsResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_HowellRpcServiceCreateCpsRebateDiscountsResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *HowellRpcServiceCreateCpsRebateDiscountsResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewCreateCpsRebateDiscountsResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *HowellRpcServiceCreateCpsRebateDiscountsResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateCpsRebateDiscounts_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *HowellRpcServiceCreateCpsRebateDiscountsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *HowellRpcServiceCreateCpsRebateDiscountsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HowellRpcServiceCreateCpsRebateDiscountsResult(%+v)", *p)

}

func (p *HowellRpcServiceCreateCpsRebateDiscountsResult) DeepEqual(ano *HowellRpcServiceCreateCpsRebateDiscountsResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *HowellRpcServiceCreateCpsRebateDiscountsResult) Field0DeepEqual(src *CreateCpsRebateDiscountsResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type HowellRpcServiceUpdateCpsRebateDiscountsArgs struct {
	Req *UpdateCpsRebateDiscountsRequest `thrift:"req,1" frugal:"1,default,UpdateCpsRebateDiscountsRequest" json:"req"`
}

func NewHowellRpcServiceUpdateCpsRebateDiscountsArgs() *HowellRpcServiceUpdateCpsRebateDiscountsArgs {
	return &HowellRpcServiceUpdateCpsRebateDiscountsArgs{}
}

func (p *HowellRpcServiceUpdateCpsRebateDiscountsArgs) InitDefault() {
	*p = HowellRpcServiceUpdateCpsRebateDiscountsArgs{}
}

var HowellRpcServiceUpdateCpsRebateDiscountsArgs_Req_DEFAULT *UpdateCpsRebateDiscountsRequest

func (p *HowellRpcServiceUpdateCpsRebateDiscountsArgs) GetReq() (v *UpdateCpsRebateDiscountsRequest) {
	if !p.IsSetReq() {
		return HowellRpcServiceUpdateCpsRebateDiscountsArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *HowellRpcServiceUpdateCpsRebateDiscountsArgs) SetReq(val *UpdateCpsRebateDiscountsRequest) {
	p.Req = val
}

var fieldIDToName_HowellRpcServiceUpdateCpsRebateDiscountsArgs = map[int16]string{
	1: "req",
}

func (p *HowellRpcServiceUpdateCpsRebateDiscountsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *HowellRpcServiceUpdateCpsRebateDiscountsArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_HowellRpcServiceUpdateCpsRebateDiscountsArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *HowellRpcServiceUpdateCpsRebateDiscountsArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewUpdateCpsRebateDiscountsRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *HowellRpcServiceUpdateCpsRebateDiscountsArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateCpsRebateDiscounts_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *HowellRpcServiceUpdateCpsRebateDiscountsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *HowellRpcServiceUpdateCpsRebateDiscountsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HowellRpcServiceUpdateCpsRebateDiscountsArgs(%+v)", *p)

}

func (p *HowellRpcServiceUpdateCpsRebateDiscountsArgs) DeepEqual(ano *HowellRpcServiceUpdateCpsRebateDiscountsArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *HowellRpcServiceUpdateCpsRebateDiscountsArgs) Field1DeepEqual(src *UpdateCpsRebateDiscountsRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type HowellRpcServiceUpdateCpsRebateDiscountsResult struct {
	Success *UpdateCpsRebateDiscountsResponse `thrift:"success,0,optional" frugal:"0,optional,UpdateCpsRebateDiscountsResponse" json:"success,omitempty"`
}

func NewHowellRpcServiceUpdateCpsRebateDiscountsResult() *HowellRpcServiceUpdateCpsRebateDiscountsResult {
	return &HowellRpcServiceUpdateCpsRebateDiscountsResult{}
}

func (p *HowellRpcServiceUpdateCpsRebateDiscountsResult) InitDefault() {
	*p = HowellRpcServiceUpdateCpsRebateDiscountsResult{}
}

var HowellRpcServiceUpdateCpsRebateDiscountsResult_Success_DEFAULT *UpdateCpsRebateDiscountsResponse

func (p *HowellRpcServiceUpdateCpsRebateDiscountsResult) GetSuccess() (v *UpdateCpsRebateDiscountsResponse) {
	if !p.IsSetSuccess() {
		return HowellRpcServiceUpdateCpsRebateDiscountsResult_Success_DEFAULT
	}
	return p.Success
}
func (p *HowellRpcServiceUpdateCpsRebateDiscountsResult) SetSuccess(x interface{}) {
	p.Success = x.(*UpdateCpsRebateDiscountsResponse)
}

var fieldIDToName_HowellRpcServiceUpdateCpsRebateDiscountsResult = map[int16]string{
	0: "success",
}

func (p *HowellRpcServiceUpdateCpsRebateDiscountsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *HowellRpcServiceUpdateCpsRebateDiscountsResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_HowellRpcServiceUpdateCpsRebateDiscountsResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *HowellRpcServiceUpdateCpsRebateDiscountsResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewUpdateCpsRebateDiscountsResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *HowellRpcServiceUpdateCpsRebateDiscountsResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateCpsRebateDiscounts_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *HowellRpcServiceUpdateCpsRebateDiscountsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *HowellRpcServiceUpdateCpsRebateDiscountsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HowellRpcServiceUpdateCpsRebateDiscountsResult(%+v)", *p)

}

func (p *HowellRpcServiceUpdateCpsRebateDiscountsResult) DeepEqual(ano *HowellRpcServiceUpdateCpsRebateDiscountsResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *HowellRpcServiceUpdateCpsRebateDiscountsResult) Field0DeepEqual(src *UpdateCpsRebateDiscountsResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type HowellRpcServiceMGetCpsRebateDiscountsArgs struct {
	Req *MGetCpsRebateDiscountsRequest `thrift:"req,1" frugal:"1,default,MGetCpsRebateDiscountsRequest" json:"req"`
}

func NewHowellRpcServiceMGetCpsRebateDiscountsArgs() *HowellRpcServiceMGetCpsRebateDiscountsArgs {
	return &HowellRpcServiceMGetCpsRebateDiscountsArgs{}
}

func (p *HowellRpcServiceMGetCpsRebateDiscountsArgs) InitDefault() {
	*p = HowellRpcServiceMGetCpsRebateDiscountsArgs{}
}

var HowellRpcServiceMGetCpsRebateDiscountsArgs_Req_DEFAULT *MGetCpsRebateDiscountsRequest

func (p *HowellRpcServiceMGetCpsRebateDiscountsArgs) GetReq() (v *MGetCpsRebateDiscountsRequest) {
	if !p.IsSetReq() {
		return HowellRpcServiceMGetCpsRebateDiscountsArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *HowellRpcServiceMGetCpsRebateDiscountsArgs) SetReq(val *MGetCpsRebateDiscountsRequest) {
	p.Req = val
}

var fieldIDToName_HowellRpcServiceMGetCpsRebateDiscountsArgs = map[int16]string{
	1: "req",
}

func (p *HowellRpcServiceMGetCpsRebateDiscountsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *HowellRpcServiceMGetCpsRebateDiscountsArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_HowellRpcServiceMGetCpsRebateDiscountsArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *HowellRpcServiceMGetCpsRebateDiscountsArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewMGetCpsRebateDiscountsRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *HowellRpcServiceMGetCpsRebateDiscountsArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("MGetCpsRebateDiscounts_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *HowellRpcServiceMGetCpsRebateDiscountsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *HowellRpcServiceMGetCpsRebateDiscountsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HowellRpcServiceMGetCpsRebateDiscountsArgs(%+v)", *p)

}

func (p *HowellRpcServiceMGetCpsRebateDiscountsArgs) DeepEqual(ano *HowellRpcServiceMGetCpsRebateDiscountsArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *HowellRpcServiceMGetCpsRebateDiscountsArgs) Field1DeepEqual(src *MGetCpsRebateDiscountsRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type HowellRpcServiceMGetCpsRebateDiscountsResult struct {
	Success *MGetCpsRebateDiscountsResponse `thrift:"success,0,optional" frugal:"0,optional,MGetCpsRebateDiscountsResponse" json:"success,omitempty"`
}

func NewHowellRpcServiceMGetCpsRebateDiscountsResult() *HowellRpcServiceMGetCpsRebateDiscountsResult {
	return &HowellRpcServiceMGetCpsRebateDiscountsResult{}
}

func (p *HowellRpcServiceMGetCpsRebateDiscountsResult) InitDefault() {
	*p = HowellRpcServiceMGetCpsRebateDiscountsResult{}
}

var HowellRpcServiceMGetCpsRebateDiscountsResult_Success_DEFAULT *MGetCpsRebateDiscountsResponse

func (p *HowellRpcServiceMGetCpsRebateDiscountsResult) GetSuccess() (v *MGetCpsRebateDiscountsResponse) {
	if !p.IsSetSuccess() {
		return HowellRpcServiceMGetCpsRebateDiscountsResult_Success_DEFAULT
	}
	return p.Success
}
func (p *HowellRpcServiceMGetCpsRebateDiscountsResult) SetSuccess(x interface{}) {
	p.Success = x.(*MGetCpsRebateDiscountsResponse)
}

var fieldIDToName_HowellRpcServiceMGetCpsRebateDiscountsResult = map[int16]string{
	0: "success",
}

func (p *HowellRpcServiceMGetCpsRebateDiscountsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *HowellRpcServiceMGetCpsRebateDiscountsResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_HowellRpcServiceMGetCpsRebateDiscountsResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *HowellRpcServiceMGetCpsRebateDiscountsResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewMGetCpsRebateDiscountsResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *HowellRpcServiceMGetCpsRebateDiscountsResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("MGetCpsRebateDiscounts_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *HowellRpcServiceMGetCpsRebateDiscountsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *HowellRpcServiceMGetCpsRebateDiscountsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HowellRpcServiceMGetCpsRebateDiscountsResult(%+v)", *p)

}

func (p *HowellRpcServiceMGetCpsRebateDiscountsResult) DeepEqual(ano *HowellRpcServiceMGetCpsRebateDiscountsResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *HowellRpcServiceMGetCpsRebateDiscountsResult) Field0DeepEqual(src *MGetCpsRebateDiscountsResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type HowellRpcServiceQueryCpsRebateDiscountsArgs struct {
	Req *QueryCpsRebateDiscountsRequest `thrift:"req,1" frugal:"1,default,QueryCpsRebateDiscountsRequest" json:"req"`
}

func NewHowellRpcServiceQueryCpsRebateDiscountsArgs() *HowellRpcServiceQueryCpsRebateDiscountsArgs {
	return &HowellRpcServiceQueryCpsRebateDiscountsArgs{}
}

func (p *HowellRpcServiceQueryCpsRebateDiscountsArgs) InitDefault() {
	*p = HowellRpcServiceQueryCpsRebateDiscountsArgs{}
}

var HowellRpcServiceQueryCpsRebateDiscountsArgs_Req_DEFAULT *QueryCpsRebateDiscountsRequest

func (p *HowellRpcServiceQueryCpsRebateDiscountsArgs) GetReq() (v *QueryCpsRebateDiscountsRequest) {
	if !p.IsSetReq() {
		return HowellRpcServiceQueryCpsRebateDiscountsArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *HowellRpcServiceQueryCpsRebateDiscountsArgs) SetReq(val *QueryCpsRebateDiscountsRequest) {
	p.Req = val
}

var fieldIDToName_HowellRpcServiceQueryCpsRebateDiscountsArgs = map[int16]string{
	1: "req",
}

func (p *HowellRpcServiceQueryCpsRebateDiscountsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *HowellRpcServiceQueryCpsRebateDiscountsArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_HowellRpcServiceQueryCpsRebateDiscountsArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *HowellRpcServiceQueryCpsRebateDiscountsArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewQueryCpsRebateDiscountsRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *HowellRpcServiceQueryCpsRebateDiscountsArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("QueryCpsRebateDiscounts_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *HowellRpcServiceQueryCpsRebateDiscountsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *HowellRpcServiceQueryCpsRebateDiscountsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HowellRpcServiceQueryCpsRebateDiscountsArgs(%+v)", *p)

}

func (p *HowellRpcServiceQueryCpsRebateDiscountsArgs) DeepEqual(ano *HowellRpcServiceQueryCpsRebateDiscountsArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *HowellRpcServiceQueryCpsRebateDiscountsArgs) Field1DeepEqual(src *QueryCpsRebateDiscountsRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type HowellRpcServiceQueryCpsRebateDiscountsResult struct {
	Success *QueryCpsRebateDiscountsResponse `thrift:"success,0,optional" frugal:"0,optional,QueryCpsRebateDiscountsResponse" json:"success,omitempty"`
}

func NewHowellRpcServiceQueryCpsRebateDiscountsResult() *HowellRpcServiceQueryCpsRebateDiscountsResult {
	return &HowellRpcServiceQueryCpsRebateDiscountsResult{}
}

func (p *HowellRpcServiceQueryCpsRebateDiscountsResult) InitDefault() {
	*p = HowellRpcServiceQueryCpsRebateDiscountsResult{}
}

var HowellRpcServiceQueryCpsRebateDiscountsResult_Success_DEFAULT *QueryCpsRebateDiscountsResponse

func (p *HowellRpcServiceQueryCpsRebateDiscountsResult) GetSuccess() (v *QueryCpsRebateDiscountsResponse) {
	if !p.IsSetSuccess() {
		return HowellRpcServiceQueryCpsRebateDiscountsResult_Success_DEFAULT
	}
	return p.Success
}
func (p *HowellRpcServiceQueryCpsRebateDiscountsResult) SetSuccess(x interface{}) {
	p.Success = x.(*QueryCpsRebateDiscountsResponse)
}

var fieldIDToName_HowellRpcServiceQueryCpsRebateDiscountsResult = map[int16]string{
	0: "success",
}

func (p *HowellRpcServiceQueryCpsRebateDiscountsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *HowellRpcServiceQueryCpsRebateDiscountsResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_HowellRpcServiceQueryCpsRebateDiscountsResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *HowellRpcServiceQueryCpsRebateDiscountsResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewQueryCpsRebateDiscountsResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *HowellRpcServiceQueryCpsRebateDiscountsResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("QueryCpsRebateDiscounts_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *HowellRpcServiceQueryCpsRebateDiscountsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *HowellRpcServiceQueryCpsRebateDiscountsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HowellRpcServiceQueryCpsRebateDiscountsResult(%+v)", *p)

}

func (p *HowellRpcServiceQueryCpsRebateDiscountsResult) DeepEqual(ano *HowellRpcServiceQueryCpsRebateDiscountsResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *HowellRpcServiceQueryCpsRebateDiscountsResult) Field0DeepEqual(src *QueryCpsRebateDiscountsResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
