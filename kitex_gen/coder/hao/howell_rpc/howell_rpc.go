// Code generated by thriftgo (0.3.6). DO NOT EDIT.

package howell_rpc

import (
	"context"
	"database/sql"
	"database/sql/driver"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"strings"
)

type CpsType int64

const (
	CpsType_Unknow CpsType = 0
)

func (p CpsType) String() string {
	switch p {
	case CpsType_Unknow:
		return "Unknow"
	}
	return "<UNSET>"
}

func CpsTypeFromString(s string) (CpsType, error) {
	switch s {
	case "Unknow":
		return CpsType_Unknow, nil
	}
	return CpsType(0), fmt.Errorf("not a valid CpsType string")
}

func CpsTypePtr(v CpsType) *CpsType { return &v }
func (p *CpsType) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = CpsType(result.Int64)
	return
}

func (p *CpsType) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type CpsRebateDiscounts struct {
	Id       *string  `thrift:"Id,1,optional" frugal:"1,optional,string" json:"Id,omitempty"`
	AppId    *int64   `thrift:"AppId,2,optional" frugal:"2,optional,i64" json:"AppId,omitempty"`
	Name     *string  `thrift:"Name,3,optional" frugal:"3,optional,string" json:"Name,omitempty"`
	CpsType  *CpsType `thrift:"CpsType,4,optional" frugal:"4,optional,CpsType" json:"CpsType,omitempty"`
	JumpLink *string  `thrift:"JumpLink,5,optional" frugal:"5,optional,string" json:"JumpLink,omitempty"`
	Extra    *string  `thrift:"Extra,6,optional" frugal:"6,optional,string" json:"Extra,omitempty"`
	Status   *int32   `thrift:"Status,7,optional" frugal:"7,optional,i32" json:"Status,omitempty"`
}

func NewCpsRebateDiscounts() *CpsRebateDiscounts {
	return &CpsRebateDiscounts{}
}

func (p *CpsRebateDiscounts) InitDefault() {
	*p = CpsRebateDiscounts{}
}

var CpsRebateDiscounts_Id_DEFAULT string

func (p *CpsRebateDiscounts) GetId() (v string) {
	if !p.IsSetId() {
		return CpsRebateDiscounts_Id_DEFAULT
	}
	return *p.Id
}

var CpsRebateDiscounts_AppId_DEFAULT int64

func (p *CpsRebateDiscounts) GetAppId() (v int64) {
	if !p.IsSetAppId() {
		return CpsRebateDiscounts_AppId_DEFAULT
	}
	return *p.AppId
}

var CpsRebateDiscounts_Name_DEFAULT string

func (p *CpsRebateDiscounts) GetName() (v string) {
	if !p.IsSetName() {
		return CpsRebateDiscounts_Name_DEFAULT
	}
	return *p.Name
}

var CpsRebateDiscounts_CpsType_DEFAULT CpsType

func (p *CpsRebateDiscounts) GetCpsType() (v CpsType) {
	if !p.IsSetCpsType() {
		return CpsRebateDiscounts_CpsType_DEFAULT
	}
	return *p.CpsType
}

var CpsRebateDiscounts_JumpLink_DEFAULT string

func (p *CpsRebateDiscounts) GetJumpLink() (v string) {
	if !p.IsSetJumpLink() {
		return CpsRebateDiscounts_JumpLink_DEFAULT
	}
	return *p.JumpLink
}

var CpsRebateDiscounts_Extra_DEFAULT string

func (p *CpsRebateDiscounts) GetExtra() (v string) {
	if !p.IsSetExtra() {
		return CpsRebateDiscounts_Extra_DEFAULT
	}
	return *p.Extra
}

var CpsRebateDiscounts_Status_DEFAULT int32

func (p *CpsRebateDiscounts) GetStatus() (v int32) {
	if !p.IsSetStatus() {
		return CpsRebateDiscounts_Status_DEFAULT
	}
	return *p.Status
}
func (p *CpsRebateDiscounts) SetId(val *string) {
	p.Id = val
}
func (p *CpsRebateDiscounts) SetAppId(val *int64) {
	p.AppId = val
}
func (p *CpsRebateDiscounts) SetName(val *string) {
	p.Name = val
}
func (p *CpsRebateDiscounts) SetCpsType(val *CpsType) {
	p.CpsType = val
}
func (p *CpsRebateDiscounts) SetJumpLink(val *string) {
	p.JumpLink = val
}
func (p *CpsRebateDiscounts) SetExtra(val *string) {
	p.Extra = val
}
func (p *CpsRebateDiscounts) SetStatus(val *int32) {
	p.Status = val
}

var fieldIDToName_CpsRebateDiscounts = map[int16]string{
	1: "Id",
	2: "AppId",
	3: "Name",
	4: "CpsType",
	5: "JumpLink",
	6: "Extra",
	7: "Status",
}

func (p *CpsRebateDiscounts) IsSetId() bool {
	return p.Id != nil
}

func (p *CpsRebateDiscounts) IsSetAppId() bool {
	return p.AppId != nil
}

func (p *CpsRebateDiscounts) IsSetName() bool {
	return p.Name != nil
}

func (p *CpsRebateDiscounts) IsSetCpsType() bool {
	return p.CpsType != nil
}

func (p *CpsRebateDiscounts) IsSetJumpLink() bool {
	return p.JumpLink != nil
}

func (p *CpsRebateDiscounts) IsSetExtra() bool {
	return p.Extra != nil
}

func (p *CpsRebateDiscounts) IsSetStatus() bool {
	return p.Status != nil
}

func (p *CpsRebateDiscounts) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CpsRebateDiscounts[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CpsRebateDiscounts) ReadField1(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Id = &v
	}
	return nil
}
func (p *CpsRebateDiscounts) ReadField2(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.AppId = &v
	}
	return nil
}
func (p *CpsRebateDiscounts) ReadField3(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Name = &v
	}
	return nil
}
func (p *CpsRebateDiscounts) ReadField4(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		tmp := CpsType(v)
		p.CpsType = &tmp
	}
	return nil
}
func (p *CpsRebateDiscounts) ReadField5(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.JumpLink = &v
	}
	return nil
}
func (p *CpsRebateDiscounts) ReadField6(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Extra = &v
	}
	return nil
}
func (p *CpsRebateDiscounts) ReadField7(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Status = &v
	}
	return nil
}

func (p *CpsRebateDiscounts) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CpsRebateDiscounts"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CpsRebateDiscounts) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetId() {
		if err = oprot.WriteFieldBegin("Id", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Id); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CpsRebateDiscounts) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetAppId() {
		if err = oprot.WriteFieldBegin("AppId", thrift.I64, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.AppId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *CpsRebateDiscounts) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err = oprot.WriteFieldBegin("Name", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Name); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *CpsRebateDiscounts) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetCpsType() {
		if err = oprot.WriteFieldBegin("CpsType", thrift.I32, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(int32(*p.CpsType)); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *CpsRebateDiscounts) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetJumpLink() {
		if err = oprot.WriteFieldBegin("JumpLink", thrift.STRING, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.JumpLink); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *CpsRebateDiscounts) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetExtra() {
		if err = oprot.WriteFieldBegin("Extra", thrift.STRING, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Extra); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *CpsRebateDiscounts) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetStatus() {
		if err = oprot.WriteFieldBegin("Status", thrift.I32, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.Status); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *CpsRebateDiscounts) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CpsRebateDiscounts(%+v)", *p)

}

func (p *CpsRebateDiscounts) DeepEqual(ano *CpsRebateDiscounts) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	if !p.Field2DeepEqual(ano.AppId) {
		return false
	}
	if !p.Field3DeepEqual(ano.Name) {
		return false
	}
	if !p.Field4DeepEqual(ano.CpsType) {
		return false
	}
	if !p.Field5DeepEqual(ano.JumpLink) {
		return false
	}
	if !p.Field6DeepEqual(ano.Extra) {
		return false
	}
	if !p.Field7DeepEqual(ano.Status) {
		return false
	}
	return true
}

func (p *CpsRebateDiscounts) Field1DeepEqual(src *string) bool {

	if p.Id == src {
		return true
	} else if p.Id == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Id, *src) != 0 {
		return false
	}
	return true
}
func (p *CpsRebateDiscounts) Field2DeepEqual(src *int64) bool {

	if p.AppId == src {
		return true
	} else if p.AppId == nil || src == nil {
		return false
	}
	if *p.AppId != *src {
		return false
	}
	return true
}
func (p *CpsRebateDiscounts) Field3DeepEqual(src *string) bool {

	if p.Name == src {
		return true
	} else if p.Name == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Name, *src) != 0 {
		return false
	}
	return true
}
func (p *CpsRebateDiscounts) Field4DeepEqual(src *CpsType) bool {

	if p.CpsType == src {
		return true
	} else if p.CpsType == nil || src == nil {
		return false
	}
	if *p.CpsType != *src {
		return false
	}
	return true
}
func (p *CpsRebateDiscounts) Field5DeepEqual(src *string) bool {

	if p.JumpLink == src {
		return true
	} else if p.JumpLink == nil || src == nil {
		return false
	}
	if strings.Compare(*p.JumpLink, *src) != 0 {
		return false
	}
	return true
}
func (p *CpsRebateDiscounts) Field6DeepEqual(src *string) bool {

	if p.Extra == src {
		return true
	} else if p.Extra == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Extra, *src) != 0 {
		return false
	}
	return true
}
func (p *CpsRebateDiscounts) Field7DeepEqual(src *int32) bool {

	if p.Status == src {
		return true
	} else if p.Status == nil || src == nil {
		return false
	}
	if *p.Status != *src {
		return false
	}
	return true
}

type CreateCpsRebateDiscountsRequest struct {
	CRDEntity *CpsRebateDiscounts `thrift:"CRDEntity,1,required" frugal:"1,required,CpsRebateDiscounts" json:"CRDEntity"`
}

func NewCreateCpsRebateDiscountsRequest() *CreateCpsRebateDiscountsRequest {
	return &CreateCpsRebateDiscountsRequest{}
}

func (p *CreateCpsRebateDiscountsRequest) InitDefault() {
	*p = CreateCpsRebateDiscountsRequest{}
}

var CreateCpsRebateDiscountsRequest_CRDEntity_DEFAULT *CpsRebateDiscounts

func (p *CreateCpsRebateDiscountsRequest) GetCRDEntity() (v *CpsRebateDiscounts) {
	if !p.IsSetCRDEntity() {
		return CreateCpsRebateDiscountsRequest_CRDEntity_DEFAULT
	}
	return p.CRDEntity
}
func (p *CreateCpsRebateDiscountsRequest) SetCRDEntity(val *CpsRebateDiscounts) {
	p.CRDEntity = val
}

var fieldIDToName_CreateCpsRebateDiscountsRequest = map[int16]string{
	1: "CRDEntity",
}

func (p *CreateCpsRebateDiscountsRequest) IsSetCRDEntity() bool {
	return p.CRDEntity != nil
}

func (p *CreateCpsRebateDiscountsRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetCRDEntity bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetCRDEntity = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetCRDEntity {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CreateCpsRebateDiscountsRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_CreateCpsRebateDiscountsRequest[fieldId]))
}

func (p *CreateCpsRebateDiscountsRequest) ReadField1(iprot thrift.TProtocol) error {
	p.CRDEntity = NewCpsRebateDiscounts()
	if err := p.CRDEntity.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *CreateCpsRebateDiscountsRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateCpsRebateDiscountsRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CreateCpsRebateDiscountsRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("CRDEntity", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.CRDEntity.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CreateCpsRebateDiscountsRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateCpsRebateDiscountsRequest(%+v)", *p)

}

func (p *CreateCpsRebateDiscountsRequest) DeepEqual(ano *CreateCpsRebateDiscountsRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.CRDEntity) {
		return false
	}
	return true
}

func (p *CreateCpsRebateDiscountsRequest) Field1DeepEqual(src *CpsRebateDiscounts) bool {

	if !p.CRDEntity.DeepEqual(src) {
		return false
	}
	return true
}

type CreateCpsRebateDiscountsResponse struct {
	EntityId *string `thrift:"EntityId,1,optional" frugal:"1,optional,string" json:"EntityId,omitempty"`
}

func NewCreateCpsRebateDiscountsResponse() *CreateCpsRebateDiscountsResponse {
	return &CreateCpsRebateDiscountsResponse{}
}

func (p *CreateCpsRebateDiscountsResponse) InitDefault() {
	*p = CreateCpsRebateDiscountsResponse{}
}

var CreateCpsRebateDiscountsResponse_EntityId_DEFAULT string

func (p *CreateCpsRebateDiscountsResponse) GetEntityId() (v string) {
	if !p.IsSetEntityId() {
		return CreateCpsRebateDiscountsResponse_EntityId_DEFAULT
	}
	return *p.EntityId
}
func (p *CreateCpsRebateDiscountsResponse) SetEntityId(val *string) {
	p.EntityId = val
}

var fieldIDToName_CreateCpsRebateDiscountsResponse = map[int16]string{
	1: "EntityId",
}

func (p *CreateCpsRebateDiscountsResponse) IsSetEntityId() bool {
	return p.EntityId != nil
}

func (p *CreateCpsRebateDiscountsResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CreateCpsRebateDiscountsResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CreateCpsRebateDiscountsResponse) ReadField1(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.EntityId = &v
	}
	return nil
}

func (p *CreateCpsRebateDiscountsResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateCpsRebateDiscountsResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CreateCpsRebateDiscountsResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEntityId() {
		if err = oprot.WriteFieldBegin("EntityId", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.EntityId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CreateCpsRebateDiscountsResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateCpsRebateDiscountsResponse(%+v)", *p)

}

func (p *CreateCpsRebateDiscountsResponse) DeepEqual(ano *CreateCpsRebateDiscountsResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.EntityId) {
		return false
	}
	return true
}

func (p *CreateCpsRebateDiscountsResponse) Field1DeepEqual(src *string) bool {

	if p.EntityId == src {
		return true
	} else if p.EntityId == nil || src == nil {
		return false
	}
	if strings.Compare(*p.EntityId, *src) != 0 {
		return false
	}
	return true
}

type HowellRpcService interface {
	CreateCpsRebateDiscounts(ctx context.Context, req *CreateCpsRebateDiscountsRequest) (r *CreateCpsRebateDiscountsResponse, err error)
}

type HowellRpcServiceClient struct {
	c thrift.TClient
}

func NewHowellRpcServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *HowellRpcServiceClient {
	return &HowellRpcServiceClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewHowellRpcServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *HowellRpcServiceClient {
	return &HowellRpcServiceClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewHowellRpcServiceClient(c thrift.TClient) *HowellRpcServiceClient {
	return &HowellRpcServiceClient{
		c: c,
	}
}

func (p *HowellRpcServiceClient) Client_() thrift.TClient {
	return p.c
}

func (p *HowellRpcServiceClient) CreateCpsRebateDiscounts(ctx context.Context, req *CreateCpsRebateDiscountsRequest) (r *CreateCpsRebateDiscountsResponse, err error) {
	var _args HowellRpcServiceCreateCpsRebateDiscountsArgs
	_args.Req = req
	var _result HowellRpcServiceCreateCpsRebateDiscountsResult
	if err = p.Client_().Call(ctx, "CreateCpsRebateDiscounts", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

type HowellRpcServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      HowellRpcService
}

func (p *HowellRpcServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *HowellRpcServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *HowellRpcServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewHowellRpcServiceProcessor(handler HowellRpcService) *HowellRpcServiceProcessor {
	self := &HowellRpcServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self.AddToProcessorMap("CreateCpsRebateDiscounts", &howellRpcServiceProcessorCreateCpsRebateDiscounts{handler: handler})
	return self
}
func (p *HowellRpcServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x
}

type howellRpcServiceProcessorCreateCpsRebateDiscounts struct {
	handler HowellRpcService
}

func (p *howellRpcServiceProcessorCreateCpsRebateDiscounts) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := HowellRpcServiceCreateCpsRebateDiscountsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("CreateCpsRebateDiscounts", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := HowellRpcServiceCreateCpsRebateDiscountsResult{}
	var retval *CreateCpsRebateDiscountsResponse
	if retval, err2 = p.handler.CreateCpsRebateDiscounts(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing CreateCpsRebateDiscounts: "+err2.Error())
		oprot.WriteMessageBegin("CreateCpsRebateDiscounts", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("CreateCpsRebateDiscounts", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type HowellRpcServiceCreateCpsRebateDiscountsArgs struct {
	Req *CreateCpsRebateDiscountsRequest `thrift:"req,1" frugal:"1,default,CreateCpsRebateDiscountsRequest" json:"req"`
}

func NewHowellRpcServiceCreateCpsRebateDiscountsArgs() *HowellRpcServiceCreateCpsRebateDiscountsArgs {
	return &HowellRpcServiceCreateCpsRebateDiscountsArgs{}
}

func (p *HowellRpcServiceCreateCpsRebateDiscountsArgs) InitDefault() {
	*p = HowellRpcServiceCreateCpsRebateDiscountsArgs{}
}

var HowellRpcServiceCreateCpsRebateDiscountsArgs_Req_DEFAULT *CreateCpsRebateDiscountsRequest

func (p *HowellRpcServiceCreateCpsRebateDiscountsArgs) GetReq() (v *CreateCpsRebateDiscountsRequest) {
	if !p.IsSetReq() {
		return HowellRpcServiceCreateCpsRebateDiscountsArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *HowellRpcServiceCreateCpsRebateDiscountsArgs) SetReq(val *CreateCpsRebateDiscountsRequest) {
	p.Req = val
}

var fieldIDToName_HowellRpcServiceCreateCpsRebateDiscountsArgs = map[int16]string{
	1: "req",
}

func (p *HowellRpcServiceCreateCpsRebateDiscountsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *HowellRpcServiceCreateCpsRebateDiscountsArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_HowellRpcServiceCreateCpsRebateDiscountsArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *HowellRpcServiceCreateCpsRebateDiscountsArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewCreateCpsRebateDiscountsRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *HowellRpcServiceCreateCpsRebateDiscountsArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateCpsRebateDiscounts_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *HowellRpcServiceCreateCpsRebateDiscountsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *HowellRpcServiceCreateCpsRebateDiscountsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HowellRpcServiceCreateCpsRebateDiscountsArgs(%+v)", *p)

}

func (p *HowellRpcServiceCreateCpsRebateDiscountsArgs) DeepEqual(ano *HowellRpcServiceCreateCpsRebateDiscountsArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *HowellRpcServiceCreateCpsRebateDiscountsArgs) Field1DeepEqual(src *CreateCpsRebateDiscountsRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type HowellRpcServiceCreateCpsRebateDiscountsResult struct {
	Success *CreateCpsRebateDiscountsResponse `thrift:"success,0,optional" frugal:"0,optional,CreateCpsRebateDiscountsResponse" json:"success,omitempty"`
}

func NewHowellRpcServiceCreateCpsRebateDiscountsResult() *HowellRpcServiceCreateCpsRebateDiscountsResult {
	return &HowellRpcServiceCreateCpsRebateDiscountsResult{}
}

func (p *HowellRpcServiceCreateCpsRebateDiscountsResult) InitDefault() {
	*p = HowellRpcServiceCreateCpsRebateDiscountsResult{}
}

var HowellRpcServiceCreateCpsRebateDiscountsResult_Success_DEFAULT *CreateCpsRebateDiscountsResponse

func (p *HowellRpcServiceCreateCpsRebateDiscountsResult) GetSuccess() (v *CreateCpsRebateDiscountsResponse) {
	if !p.IsSetSuccess() {
		return HowellRpcServiceCreateCpsRebateDiscountsResult_Success_DEFAULT
	}
	return p.Success
}
func (p *HowellRpcServiceCreateCpsRebateDiscountsResult) SetSuccess(x interface{}) {
	p.Success = x.(*CreateCpsRebateDiscountsResponse)
}

var fieldIDToName_HowellRpcServiceCreateCpsRebateDiscountsResult = map[int16]string{
	0: "success",
}

func (p *HowellRpcServiceCreateCpsRebateDiscountsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *HowellRpcServiceCreateCpsRebateDiscountsResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_HowellRpcServiceCreateCpsRebateDiscountsResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *HowellRpcServiceCreateCpsRebateDiscountsResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewCreateCpsRebateDiscountsResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *HowellRpcServiceCreateCpsRebateDiscountsResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateCpsRebateDiscounts_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *HowellRpcServiceCreateCpsRebateDiscountsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *HowellRpcServiceCreateCpsRebateDiscountsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HowellRpcServiceCreateCpsRebateDiscountsResult(%+v)", *p)

}

func (p *HowellRpcServiceCreateCpsRebateDiscountsResult) DeepEqual(ano *HowellRpcServiceCreateCpsRebateDiscountsResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *HowellRpcServiceCreateCpsRebateDiscountsResult) Field0DeepEqual(src *CreateCpsRebateDiscountsResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
