// Code generated by thriftgo (0.3.6). DO NOT EDIT.

package models

import (
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"howell/howell_rpc/kitex_gen/common"
	"strings"
)

type CpsRebateDiscounts struct {
	Id       *string         `thrift:"id,1,optional" frugal:"1,optional,string" json:"id,omitempty"`
	AppId    *string         `thrift:"app_id,2,optional" frugal:"2,optional,string" json:"app_id,omitempty"`
	Name     *string         `thrift:"name,3,optional" frugal:"3,optional,string" json:"name,omitempty"`
	CpsType  *common.CpsType `thrift:"cps_type,4,optional" frugal:"4,optional,string" json:"cps_type,omitempty"`
	ActType  *common.ActType `thrift:"act_type,5,optional" frugal:"5,optional,string" json:"act_type,omitempty"`
	ActUrl   *string         `thrift:"act_url,6,optional" frugal:"6,optional,string" json:"act_url,omitempty"`
	Images   *string         `thrift:"images,7,optional" frugal:"7,optional,string" json:"images,omitempty"`
	Extra    *string         `thrift:"extra,8,optional" frugal:"8,optional,string" json:"extra,omitempty"`
	Status   *common.Status  `thrift:"status,9,optional" frugal:"9,optional,Status" json:"status,omitempty"`
	Resource *string         `thrift:"resource,10,optional" frugal:"10,optional,string" json:"resource,omitempty"`
}

func NewCpsRebateDiscounts() *CpsRebateDiscounts {
	return &CpsRebateDiscounts{}
}

func (p *CpsRebateDiscounts) InitDefault() {
	*p = CpsRebateDiscounts{}
}

var CpsRebateDiscounts_Id_DEFAULT string

func (p *CpsRebateDiscounts) GetId() (v string) {
	if !p.IsSetId() {
		return CpsRebateDiscounts_Id_DEFAULT
	}
	return *p.Id
}

var CpsRebateDiscounts_AppId_DEFAULT string

func (p *CpsRebateDiscounts) GetAppId() (v string) {
	if !p.IsSetAppId() {
		return CpsRebateDiscounts_AppId_DEFAULT
	}
	return *p.AppId
}

var CpsRebateDiscounts_Name_DEFAULT string

func (p *CpsRebateDiscounts) GetName() (v string) {
	if !p.IsSetName() {
		return CpsRebateDiscounts_Name_DEFAULT
	}
	return *p.Name
}

var CpsRebateDiscounts_CpsType_DEFAULT common.CpsType

func (p *CpsRebateDiscounts) GetCpsType() (v common.CpsType) {
	if !p.IsSetCpsType() {
		return CpsRebateDiscounts_CpsType_DEFAULT
	}
	return *p.CpsType
}

var CpsRebateDiscounts_ActType_DEFAULT common.ActType

func (p *CpsRebateDiscounts) GetActType() (v common.ActType) {
	if !p.IsSetActType() {
		return CpsRebateDiscounts_ActType_DEFAULT
	}
	return *p.ActType
}

var CpsRebateDiscounts_ActUrl_DEFAULT string

func (p *CpsRebateDiscounts) GetActUrl() (v string) {
	if !p.IsSetActUrl() {
		return CpsRebateDiscounts_ActUrl_DEFAULT
	}
	return *p.ActUrl
}

var CpsRebateDiscounts_Images_DEFAULT string

func (p *CpsRebateDiscounts) GetImages() (v string) {
	if !p.IsSetImages() {
		return CpsRebateDiscounts_Images_DEFAULT
	}
	return *p.Images
}

var CpsRebateDiscounts_Extra_DEFAULT string

func (p *CpsRebateDiscounts) GetExtra() (v string) {
	if !p.IsSetExtra() {
		return CpsRebateDiscounts_Extra_DEFAULT
	}
	return *p.Extra
}

var CpsRebateDiscounts_Status_DEFAULT common.Status

func (p *CpsRebateDiscounts) GetStatus() (v common.Status) {
	if !p.IsSetStatus() {
		return CpsRebateDiscounts_Status_DEFAULT
	}
	return *p.Status
}

var CpsRebateDiscounts_Resource_DEFAULT string

func (p *CpsRebateDiscounts) GetResource() (v string) {
	if !p.IsSetResource() {
		return CpsRebateDiscounts_Resource_DEFAULT
	}
	return *p.Resource
}
func (p *CpsRebateDiscounts) SetId(val *string) {
	p.Id = val
}
func (p *CpsRebateDiscounts) SetAppId(val *string) {
	p.AppId = val
}
func (p *CpsRebateDiscounts) SetName(val *string) {
	p.Name = val
}
func (p *CpsRebateDiscounts) SetCpsType(val *common.CpsType) {
	p.CpsType = val
}
func (p *CpsRebateDiscounts) SetActType(val *common.ActType) {
	p.ActType = val
}
func (p *CpsRebateDiscounts) SetActUrl(val *string) {
	p.ActUrl = val
}
func (p *CpsRebateDiscounts) SetImages(val *string) {
	p.Images = val
}
func (p *CpsRebateDiscounts) SetExtra(val *string) {
	p.Extra = val
}
func (p *CpsRebateDiscounts) SetStatus(val *common.Status) {
	p.Status = val
}
func (p *CpsRebateDiscounts) SetResource(val *string) {
	p.Resource = val
}

var fieldIDToName_CpsRebateDiscounts = map[int16]string{
	1:  "id",
	2:  "app_id",
	3:  "name",
	4:  "cps_type",
	5:  "act_type",
	6:  "act_url",
	7:  "images",
	8:  "extra",
	9:  "status",
	10: "resource",
}

func (p *CpsRebateDiscounts) IsSetId() bool {
	return p.Id != nil
}

func (p *CpsRebateDiscounts) IsSetAppId() bool {
	return p.AppId != nil
}

func (p *CpsRebateDiscounts) IsSetName() bool {
	return p.Name != nil
}

func (p *CpsRebateDiscounts) IsSetCpsType() bool {
	return p.CpsType != nil
}

func (p *CpsRebateDiscounts) IsSetActType() bool {
	return p.ActType != nil
}

func (p *CpsRebateDiscounts) IsSetActUrl() bool {
	return p.ActUrl != nil
}

func (p *CpsRebateDiscounts) IsSetImages() bool {
	return p.Images != nil
}

func (p *CpsRebateDiscounts) IsSetExtra() bool {
	return p.Extra != nil
}

func (p *CpsRebateDiscounts) IsSetStatus() bool {
	return p.Status != nil
}

func (p *CpsRebateDiscounts) IsSetResource() bool {
	return p.Resource != nil
}

func (p *CpsRebateDiscounts) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CpsRebateDiscounts[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CpsRebateDiscounts) ReadField1(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Id = &v
	}
	return nil
}
func (p *CpsRebateDiscounts) ReadField2(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.AppId = &v
	}
	return nil
}
func (p *CpsRebateDiscounts) ReadField3(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Name = &v
	}
	return nil
}
func (p *CpsRebateDiscounts) ReadField4(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.CpsType = &v
	}
	return nil
}
func (p *CpsRebateDiscounts) ReadField5(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ActType = &v
	}
	return nil
}
func (p *CpsRebateDiscounts) ReadField6(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ActUrl = &v
	}
	return nil
}
func (p *CpsRebateDiscounts) ReadField7(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Images = &v
	}
	return nil
}
func (p *CpsRebateDiscounts) ReadField8(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Extra = &v
	}
	return nil
}
func (p *CpsRebateDiscounts) ReadField9(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		tmp := common.Status(v)
		p.Status = &tmp
	}
	return nil
}
func (p *CpsRebateDiscounts) ReadField10(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Resource = &v
	}
	return nil
}

func (p *CpsRebateDiscounts) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CpsRebateDiscounts"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CpsRebateDiscounts) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetId() {
		if err = oprot.WriteFieldBegin("id", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Id); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CpsRebateDiscounts) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetAppId() {
		if err = oprot.WriteFieldBegin("app_id", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.AppId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *CpsRebateDiscounts) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err = oprot.WriteFieldBegin("name", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Name); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *CpsRebateDiscounts) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetCpsType() {
		if err = oprot.WriteFieldBegin("cps_type", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.CpsType); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *CpsRebateDiscounts) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetActType() {
		if err = oprot.WriteFieldBegin("act_type", thrift.STRING, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.ActType); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *CpsRebateDiscounts) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetActUrl() {
		if err = oprot.WriteFieldBegin("act_url", thrift.STRING, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.ActUrl); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *CpsRebateDiscounts) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetImages() {
		if err = oprot.WriteFieldBegin("images", thrift.STRING, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Images); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *CpsRebateDiscounts) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetExtra() {
		if err = oprot.WriteFieldBegin("extra", thrift.STRING, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Extra); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *CpsRebateDiscounts) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetStatus() {
		if err = oprot.WriteFieldBegin("status", thrift.I32, 9); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(int32(*p.Status)); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *CpsRebateDiscounts) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetResource() {
		if err = oprot.WriteFieldBegin("resource", thrift.STRING, 10); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Resource); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *CpsRebateDiscounts) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CpsRebateDiscounts(%+v)", *p)

}

func (p *CpsRebateDiscounts) DeepEqual(ano *CpsRebateDiscounts) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	if !p.Field2DeepEqual(ano.AppId) {
		return false
	}
	if !p.Field3DeepEqual(ano.Name) {
		return false
	}
	if !p.Field4DeepEqual(ano.CpsType) {
		return false
	}
	if !p.Field5DeepEqual(ano.ActType) {
		return false
	}
	if !p.Field6DeepEqual(ano.ActUrl) {
		return false
	}
	if !p.Field7DeepEqual(ano.Images) {
		return false
	}
	if !p.Field8DeepEqual(ano.Extra) {
		return false
	}
	if !p.Field9DeepEqual(ano.Status) {
		return false
	}
	if !p.Field10DeepEqual(ano.Resource) {
		return false
	}
	return true
}

func (p *CpsRebateDiscounts) Field1DeepEqual(src *string) bool {

	if p.Id == src {
		return true
	} else if p.Id == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Id, *src) != 0 {
		return false
	}
	return true
}
func (p *CpsRebateDiscounts) Field2DeepEqual(src *string) bool {

	if p.AppId == src {
		return true
	} else if p.AppId == nil || src == nil {
		return false
	}
	if strings.Compare(*p.AppId, *src) != 0 {
		return false
	}
	return true
}
func (p *CpsRebateDiscounts) Field3DeepEqual(src *string) bool {

	if p.Name == src {
		return true
	} else if p.Name == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Name, *src) != 0 {
		return false
	}
	return true
}
func (p *CpsRebateDiscounts) Field4DeepEqual(src *common.CpsType) bool {

	if p.CpsType == src {
		return true
	} else if p.CpsType == nil || src == nil {
		return false
	}
	if strings.Compare(*p.CpsType, *src) != 0 {
		return false
	}
	return true
}
func (p *CpsRebateDiscounts) Field5DeepEqual(src *common.ActType) bool {

	if p.ActType == src {
		return true
	} else if p.ActType == nil || src == nil {
		return false
	}
	if strings.Compare(*p.ActType, *src) != 0 {
		return false
	}
	return true
}
func (p *CpsRebateDiscounts) Field6DeepEqual(src *string) bool {

	if p.ActUrl == src {
		return true
	} else if p.ActUrl == nil || src == nil {
		return false
	}
	if strings.Compare(*p.ActUrl, *src) != 0 {
		return false
	}
	return true
}
func (p *CpsRebateDiscounts) Field7DeepEqual(src *string) bool {

	if p.Images == src {
		return true
	} else if p.Images == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Images, *src) != 0 {
		return false
	}
	return true
}
func (p *CpsRebateDiscounts) Field8DeepEqual(src *string) bool {

	if p.Extra == src {
		return true
	} else if p.Extra == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Extra, *src) != 0 {
		return false
	}
	return true
}
func (p *CpsRebateDiscounts) Field9DeepEqual(src *common.Status) bool {

	if p.Status == src {
		return true
	} else if p.Status == nil || src == nil {
		return false
	}
	if *p.Status != *src {
		return false
	}
	return true
}
func (p *CpsRebateDiscounts) Field10DeepEqual(src *string) bool {

	if p.Resource == src {
		return true
	} else if p.Resource == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Resource, *src) != 0 {
		return false
	}
	return true
}
